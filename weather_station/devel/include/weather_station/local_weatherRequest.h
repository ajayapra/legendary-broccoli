// Generated by gencpp from file weather_station/local_weatherRequest.msg
// DO NOT EDIT!


#ifndef WEATHER_STATION_MESSAGE_LOCAL_WEATHERREQUEST_H
#define WEATHER_STATION_MESSAGE_LOCAL_WEATHERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace weather_station
{
template <class ContainerAllocator>
struct local_weatherRequest_
{
  typedef local_weatherRequest_<ContainerAllocator> Type;

  local_weatherRequest_()
    : zip_code()  {
    }
  local_weatherRequest_(const ContainerAllocator& _alloc)
    : zip_code(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _zip_code_type;
  _zip_code_type zip_code;




  typedef boost::shared_ptr< ::weather_station::local_weatherRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::weather_station::local_weatherRequest_<ContainerAllocator> const> ConstPtr;

}; // struct local_weatherRequest_

typedef ::weather_station::local_weatherRequest_<std::allocator<void> > local_weatherRequest;

typedef boost::shared_ptr< ::weather_station::local_weatherRequest > local_weatherRequestPtr;
typedef boost::shared_ptr< ::weather_station::local_weatherRequest const> local_weatherRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::weather_station::local_weatherRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::weather_station::local_weatherRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace weather_station

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'weather_station': ['/home/ian/Robotics/legendary-broccoli/weather_station/src/weather_station/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::weather_station::local_weatherRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::weather_station::local_weatherRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::weather_station::local_weatherRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::weather_station::local_weatherRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::weather_station::local_weatherRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::weather_station::local_weatherRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::weather_station::local_weatherRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9177d708ffec74c192e65b12ce364cc4";
  }

  static const char* value(const ::weather_station::local_weatherRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9177d708ffec74c1ULL;
  static const uint64_t static_value2 = 0x92e65b12ce364cc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::weather_station::local_weatherRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "weather_station/local_weatherRequest";
  }

  static const char* value(const ::weather_station::local_weatherRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::weather_station::local_weatherRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string zip_code\n\
";
  }

  static const char* value(const ::weather_station::local_weatherRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::weather_station::local_weatherRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zip_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct local_weatherRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::weather_station::local_weatherRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::weather_station::local_weatherRequest_<ContainerAllocator>& v)
  {
    s << indent << "zip_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.zip_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WEATHER_STATION_MESSAGE_LOCAL_WEATHERREQUEST_H
